name: "Build containers: Fedora CoreOS (stable)"

env:
  IMAGE: 'quay.io/fedora/fedora-coreos'
  RELEASE: 'stable'
  NAME: 'Fedora CoreOS (stable)'
  REGISTRY: 'quay.io/travier'
  DESTINATION: 'fedora-coreos-sysexts'
  PR: ${{ github.event_name == 'pull_request' }}

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron:  '0 0 * * MON'
  workflow_dispatch:

permissions: read-all

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.sysext }}

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Reclaim disk space
        run: |
          sudo docker image prune --all --force
          sudo rm -rf "/usr/local/lib/android"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: "Mark directory as safe"
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main

      - name: "Checking if we need to build container: 1password-cli"
        id: check-1password-cli
        env:
          SYSEXT: 1password-cli
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: 1password-cli"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-1password-cli.outputs.BUILD == 'true')
        with:
          context: '1password-cli'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.1password-cli
          containerfiles: '1password-cli/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: btop"
        id: check-btop
        env:
          SYSEXT: btop
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: btop"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-btop.outputs.BUILD == 'true')
        with:
          context: 'btop'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.btop
          containerfiles: 'btop/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: cockpit"
        id: check-cockpit
        env:
          SYSEXT: cockpit
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: cockpit"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-cockpit.outputs.BUILD == 'true')
        with:
          context: 'cockpit'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.cockpit
          containerfiles: 'cockpit/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: compsize"
        id: check-compsize
        env:
          SYSEXT: compsize
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: compsize"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-compsize.outputs.BUILD == 'true')
        with:
          context: 'compsize'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.compsize
          containerfiles: 'compsize/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: cri-o-1.29"
        id: check-cri-o-1_29
        env:
          SYSEXT: cri-o-1.29
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: cri-o-1.29"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-cri-o-1_29.outputs.BUILD == 'true')
        with:
          context: 'cri-o-1.29'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.cri-o-1.29
          containerfiles: 'cri-o-1.29/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: cri-o-1.30"
        id: check-cri-o-1_30
        env:
          SYSEXT: cri-o-1.30
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: cri-o-1.30"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-cri-o-1_30.outputs.BUILD == 'true')
        with:
          context: 'cri-o-1.30'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.cri-o-1.30
          containerfiles: 'cri-o-1.30/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: cri-o-1.31"
        id: check-cri-o-1_31
        env:
          SYSEXT: cri-o-1.31
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: cri-o-1.31"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-cri-o-1_31.outputs.BUILD == 'true')
        with:
          context: 'cri-o-1.31'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.cri-o-1.31
          containerfiles: 'cri-o-1.31/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: distrobox"
        id: check-distrobox
        env:
          SYSEXT: distrobox
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: distrobox"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-distrobox.outputs.BUILD == 'true')
        with:
          context: 'distrobox'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.distrobox
          containerfiles: 'distrobox/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: erofs-utils"
        id: check-erofs-utils
        env:
          SYSEXT: erofs-utils
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: erofs-utils"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-erofs-utils.outputs.BUILD == 'true')
        with:
          context: 'erofs-utils'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.erofs-utils
          containerfiles: 'erofs-utils/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: gdb"
        id: check-gdb
        env:
          SYSEXT: gdb
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: gdb"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-gdb.outputs.BUILD == 'true')
        with:
          context: 'gdb'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.gdb
          containerfiles: 'gdb/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: git-tools"
        id: check-git-tools
        env:
          SYSEXT: git-tools
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: git-tools"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-git-tools.outputs.BUILD == 'true')
        with:
          context: 'git-tools'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.git-tools
          containerfiles: 'git-tools/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: htop"
        id: check-htop
        env:
          SYSEXT: htop
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: htop"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-htop.outputs.BUILD == 'true')
        with:
          context: 'htop'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.htop
          containerfiles: 'htop/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: incus"
        id: check-incus
        env:
          SYSEXT: incus
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: incus"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-incus.outputs.BUILD == 'true')
        with:
          context: 'incus'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.incus
          containerfiles: 'incus/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: iwd"
        id: check-iwd
        env:
          SYSEXT: iwd
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: iwd"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-iwd.outputs.BUILD == 'true')
        with:
          context: 'iwd'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.iwd
          containerfiles: 'iwd/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: just"
        id: check-just
        env:
          SYSEXT: just
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: just"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-just.outputs.BUILD == 'true')
        with:
          context: 'just'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.just
          containerfiles: 'just/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-1.29"
        id: check-kubernetes-1_29
        env:
          SYSEXT: kubernetes-1.29
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-1.29"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-1_29.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-1.29'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-1.29
          containerfiles: 'kubernetes-1.29/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-1.30"
        id: check-kubernetes-1_30
        env:
          SYSEXT: kubernetes-1.30
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-1.30"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-1_30.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-1.30'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-1.30
          containerfiles: 'kubernetes-1.30/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-1.31"
        id: check-kubernetes-1_31
        env:
          SYSEXT: kubernetes-1.31
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-1.31"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-1_31.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-1.31'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-1.31
          containerfiles: 'kubernetes-1.31/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-cri-o-1.29"
        id: check-kubernetes-cri-o-1_29
        env:
          SYSEXT: kubernetes-cri-o-1.29
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-cri-o-1.29"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-cri-o-1_29.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-cri-o-1.29'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.29
          containerfiles: 'kubernetes-cri-o-1.29/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-cri-o-1.30"
        id: check-kubernetes-cri-o-1_30
        env:
          SYSEXT: kubernetes-cri-o-1.30
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-cri-o-1.30"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-cri-o-1_30.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-cri-o-1.30'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.30
          containerfiles: 'kubernetes-cri-o-1.30/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: kubernetes-cri-o-1.31"
        id: check-kubernetes-cri-o-1_31
        env:
          SYSEXT: kubernetes-cri-o-1.31
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: kubernetes-cri-o-1.31"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-kubernetes-cri-o-1_31.outputs.BUILD == 'true')
        with:
          context: 'kubernetes-cri-o-1.31'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.31
          containerfiles: 'kubernetes-cri-o-1.31/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: libvirtd"
        id: check-libvirtd
        env:
          SYSEXT: libvirtd
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: libvirtd"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-libvirtd.outputs.BUILD == 'true')
        with:
          context: 'libvirtd'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.libvirtd
          containerfiles: 'libvirtd/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: monitoring"
        id: check-monitoring
        env:
          SYSEXT: monitoring
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: monitoring"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-monitoring.outputs.BUILD == 'true')
        with:
          context: 'monitoring'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.monitoring
          containerfiles: 'monitoring/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: neovim"
        id: check-neovim
        env:
          SYSEXT: neovim
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: neovim"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-neovim.outputs.BUILD == 'true')
        with:
          context: 'neovim'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.neovim
          containerfiles: 'neovim/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: python"
        id: check-python
        env:
          SYSEXT: python
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: python"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-python.outputs.BUILD == 'true')
        with:
          context: 'python'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.python
          containerfiles: 'python/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: ripgrep"
        id: check-ripgrep
        env:
          SYSEXT: ripgrep
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: ripgrep"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-ripgrep.outputs.BUILD == 'true')
        with:
          context: 'ripgrep'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.ripgrep
          containerfiles: 'ripgrep/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: semanage"
        id: check-semanage
        env:
          SYSEXT: semanage
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: semanage"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-semanage.outputs.BUILD == 'true')
        with:
          context: 'semanage'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.semanage
          containerfiles: 'semanage/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: strace"
        id: check-strace
        env:
          SYSEXT: strace
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: strace"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-strace.outputs.BUILD == 'true')
        with:
          context: 'strace'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.strace
          containerfiles: 'strace/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: tree"
        id: check-tree
        env:
          SYSEXT: tree
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: tree"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-tree.outputs.BUILD == 'true')
        with:
          context: 'tree'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.tree
          containerfiles: 'tree/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: vim"
        id: check-vim
        env:
          SYSEXT: vim
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: vim"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-vim.outputs.BUILD == 'true')
        with:
          context: 'vim'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.vim
          containerfiles: 'vim/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: "Checking if we need to build container: zsh"
        id: check-zsh
        env:
          SYSEXT: zsh
        run: |
          cd "${SYSEXT}"
          if [[ "${PR}" == "true" ]]; then
              diff="$(git diff origin/main HEAD --stat -- .)"
              if [[ -z "${diff}" ]]; then
                  echo "Skipping: No changes for this sysext in this PR"
                  echo "BUILD=false" >> "$GITHUB_OUTPUT"
              else
                  echo "BUILD=true" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: "Build container: zsh"
        uses: redhat-actions/buildah-build@v2
        if: (steps.check-zsh.outputs.BUILD == 'true')
        with:
          context: 'zsh'
          image: ${{ env.DESTINATION }}
          tags: ${{ env.RELEASE }}.zsh
          containerfiles: 'zsh/Containerfile'
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.IMAGE }}:${{ env.RELEASE }}

      - name: Login to Container Registry
        uses: redhat-actions/podman-login@v1
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}

      - uses: sigstore/cosign-installer@v3.7.0
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'

      - name: "Push container: 1password-cli"
        uses: redhat-actions/push-to-registry@v2
        id: push-1password-cli
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.1password-cli

      - name: "Sign container: 1password-cli"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-1password-cli.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: btop"
        uses: redhat-actions/push-to-registry@v2
        id: push-btop
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.btop

      - name: "Sign container: btop"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-btop.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: cockpit"
        uses: redhat-actions/push-to-registry@v2
        id: push-cockpit
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.cockpit

      - name: "Sign container: cockpit"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-cockpit.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: compsize"
        uses: redhat-actions/push-to-registry@v2
        id: push-compsize
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.compsize

      - name: "Sign container: compsize"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-compsize.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: cri-o-1.29"
        uses: redhat-actions/push-to-registry@v2
        id: push-cri-o-1_29
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.cri-o-1.29

      - name: "Sign container: cri-o-1.29"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-cri-o-1_29.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: cri-o-1.30"
        uses: redhat-actions/push-to-registry@v2
        id: push-cri-o-1_30
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.cri-o-1.30

      - name: "Sign container: cri-o-1.30"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-cri-o-1_30.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: cri-o-1.31"
        uses: redhat-actions/push-to-registry@v2
        id: push-cri-o-1_31
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.cri-o-1.31

      - name: "Sign container: cri-o-1.31"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-cri-o-1_31.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: distrobox"
        uses: redhat-actions/push-to-registry@v2
        id: push-distrobox
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.distrobox

      - name: "Sign container: distrobox"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-distrobox.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: erofs-utils"
        uses: redhat-actions/push-to-registry@v2
        id: push-erofs-utils
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.erofs-utils

      - name: "Sign container: erofs-utils"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-erofs-utils.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: gdb"
        uses: redhat-actions/push-to-registry@v2
        id: push-gdb
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.gdb

      - name: "Sign container: gdb"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-gdb.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: git-tools"
        uses: redhat-actions/push-to-registry@v2
        id: push-git-tools
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.git-tools

      - name: "Sign container: git-tools"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-git-tools.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: htop"
        uses: redhat-actions/push-to-registry@v2
        id: push-htop
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.htop

      - name: "Sign container: htop"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-htop.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: incus"
        uses: redhat-actions/push-to-registry@v2
        id: push-incus
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.incus

      - name: "Sign container: incus"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-incus.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: iwd"
        uses: redhat-actions/push-to-registry@v2
        id: push-iwd
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.iwd

      - name: "Sign container: iwd"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-iwd.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: just"
        uses: redhat-actions/push-to-registry@v2
        id: push-just
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.just

      - name: "Sign container: just"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-just.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-1.29"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-1_29
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-1.29

      - name: "Sign container: kubernetes-1.29"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-1_29.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-1.30"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-1_30
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-1.30

      - name: "Sign container: kubernetes-1.30"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-1_30.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-1.31"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-1_31
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-1.31

      - name: "Sign container: kubernetes-1.31"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-1_31.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-cri-o-1.29"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-cri-o-1_29
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.29

      - name: "Sign container: kubernetes-cri-o-1.29"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-cri-o-1_29.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-cri-o-1.30"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-cri-o-1_30
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.30

      - name: "Sign container: kubernetes-cri-o-1.30"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-cri-o-1_30.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: kubernetes-cri-o-1.31"
        uses: redhat-actions/push-to-registry@v2
        id: push-kubernetes-cri-o-1_31
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.kubernetes-cri-o-1.31

      - name: "Sign container: kubernetes-cri-o-1.31"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-kubernetes-cri-o-1_31.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: libvirtd"
        uses: redhat-actions/push-to-registry@v2
        id: push-libvirtd
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.libvirtd

      - name: "Sign container: libvirtd"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-libvirtd.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: monitoring"
        uses: redhat-actions/push-to-registry@v2
        id: push-monitoring
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.monitoring

      - name: "Sign container: monitoring"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-monitoring.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: neovim"
        uses: redhat-actions/push-to-registry@v2
        id: push-neovim
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.neovim

      - name: "Sign container: neovim"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-neovim.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: python"
        uses: redhat-actions/push-to-registry@v2
        id: push-python
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.python

      - name: "Sign container: python"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-python.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: ripgrep"
        uses: redhat-actions/push-to-registry@v2
        id: push-ripgrep
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.ripgrep

      - name: "Sign container: ripgrep"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-ripgrep.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: semanage"
        uses: redhat-actions/push-to-registry@v2
        id: push-semanage
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.semanage

      - name: "Sign container: semanage"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-semanage.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: strace"
        uses: redhat-actions/push-to-registry@v2
        id: push-strace
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.strace

      - name: "Sign container: strace"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-strace.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: tree"
        uses: redhat-actions/push-to-registry@v2
        id: push-tree
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.tree

      - name: "Sign container: tree"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-tree.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: vim"
        uses: redhat-actions/push-to-registry@v2
        id: push-vim
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.vim

      - name: "Sign container: vim"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-vim.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: "Push container: zsh"
        uses: redhat-actions/push-to-registry@v2
        id: push-zsh
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.DESTINATION }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ env.RELEASE }}.zsh

      - name: "Sign container: zsh"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.DESTINATION }}@${{ steps.push-zsh.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

