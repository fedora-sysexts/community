name: "Build containers sysexts for Fedora Kinoite"

env:
  REGISTRY: "quay.io/travier"
  NAME: "fedora-kinoite-sysexts"
  BASE: "quay.io/fedora-ostree-desktops/kinoite"

# Disabled for now as it's expensive / not super efficient.
# We should unroll the sysext matrix variable in order to pull the base image
# only once per run instead of for each job.
on:
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - '*/Containerfile'
  #     - '.github/workflows/containers-fedora-kinoite.yml'
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '*/Containerfile'
  #     - '.github/workflows/containers-fedora-kinoite.yml'
  # schedule:
  #   - cron:  '0 0 * * MON'
  workflow_dispatch:

permissions: read-all

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs for
# pull requests only.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build-push-image:
    strategy:
      matrix:
        release:
          - '41'
          # - 'rawhide'
        sysext:
          - 'debugtools'
          - 'iwd'
          - 'krb5-workstation'
          - 'libvirtd'
          - 'openh264'
          - 'steam'
          - 'steam-devices'
          - 'tools'

    runs-on: ubuntu-24.04
    steps:
      - name: Reclaim disk space
        run: |
          sudo docker image prune --all --force
          sudo rm -rf "/usr/local/lib/android"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: "Build container image"
        uses: redhat-actions/buildah-build@v2
        with:
          context: ${{ matrix.sysext }}
          image: ${{ env.NAME }}
          tags: ${{ matrix.release }}.${{ matrix.sysext }}
          containerfiles: ${{ matrix.sysext }}/Containerfile
          layers: false
          oci: true
          extra-args:
            --from
            ${{ env.BASE }}:${{ matrix.release }}

      - name: "Push to Container Registry"
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}
          image: ${{ env.NAME }}
          registry: ${{ env.REGISTRY }}
          tags: ${{ matrix.release }}.${{ matrix.sysext }}
          extra-args: |
            --compression-format=zstd:chunked
            --compression-level=19

      - name: Login to Container Registry
        uses: redhat-actions/podman-login@v1
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_SECRET }}

      - uses: sigstore/cosign-installer@v3.7.0
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'

      - name: "Sign container image"
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ env.NAME }}@${{ steps.push.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
